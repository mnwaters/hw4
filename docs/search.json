[
  {
    "objectID": "hw42.html",
    "href": "hw42.html",
    "title": "",
    "section": "",
    "text": "Homework 4\nTask 1: Conceptual Questions\nIf your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\nc:.csv\nWhat are the major benefits of using R projects?\nConsolidation of your data and data manipulations into one working directory.\nWhat is git and what is github?\nGithub is the application to use Git\nGit is the version control system\nWhat are the two main differences between a tibble and a data.frame?\nA tibble prints in an easy to read format\nTidyverse functions are built for tibbles\nRewrite the following nested function call using BaseR’s chaining operator:"
  },
  {
    "objectID": "hw4.html",
    "href": "hw4.html",
    "title": "Homework 4",
    "section": "",
    "text": "library(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(readr)\nlibrary(readxl)\n\n\nIf your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\nc:\\Users\\Documents\\myfolder\\Mydata.csv\n\nWhat are the major benefits of using R projects?\n\nConsolidation of your data and data manipulations into one working directory.\n\nWhat is git and what is github?\n\nGithub is the application to use Git\nGit is the version control system\n\nWhat are the two main differences between a tibble and a data.frame?\n\nA tibble prints in an easy to read format\nTidyverse functions are built for tibbles\n\nRewrite the following nested function call using BaseR’s chaining operator: arrange(filter(select(as_tibble(iris), starts_with(“Petal”), Species), Petal.Length &lt; 1.55), Species)\n\niris2&lt;-iris %&gt;% \n  subset(Petal.Length &lt; 1.55, select = c(grepl(\"^Petal\", names(iris)), Species))\n\n\n\n\n\n\n\n1. Read this data into R directly from the URL using functions from the tidyverse. Notice that the data doesn’t include column names - add those (in a manner of your choosing). Print out the tibble (just call the object name).\n\nglassdata&lt;-read_delim(\"https://www4.stat.ncsu.edu/online/datasets/glass.data\", \n                       delim = \",\",\n                       col_names = c(\"Id\", \"RI\", \"Na\", \"Mg\", \"Al\", \"Si\",\"K\",\"Ca\", \"Ba\",\"Fe\",\"Type_of_glass\"))\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): Id, RI, Na, Mg, Al, Si, K, Ca, Ba, Fe, Type_of_glass\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglassdata\n\n# A tibble: 214 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0                1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0                1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0                1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0                1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0                1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26             1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0                1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0                1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0                1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11             1\n# ℹ 204 more rows\n\n\n\nStart a chain that would overwrite the Type_of_glass variable using mutate(). Create a character string version (that is, replace 1 with “building_windows_float_processed”, 2 with “building_win. . .”, etc.) instead (see the variable descriptions above to give meaningful values). (If you are familiar with factors, feel free to use that instead of a character string variable - otherwise, think if/then/else via ifelse().)\n\n\nglassdata2&lt;-glassdata %&gt;%\n  mutate(Type_of_glass2 = ifelse(Type_of_glass == 1,\"building_windows_float_processed\",\n                                ifelse(Type_of_glass == 2,\"building_windows_non_float_processed\",\n                                       ifelse(Type_of_glass == 3, \"vehicle_windows_float_processed\",\n                                              ifelse(Type_of_glass == 4, \"vehicle_windows_non_float_processed\",\n                                                     ifelse(Type_of_glass == 5, \"containers\",\n                                                            ifelse(Type_of_glass == 6, \"tableware\",\n                                                                   ifelse(Type_of_glass== 7, \"headlamps\",0)))\n                                              ))))\n    \n  ) %&gt;% \n  select(\"Id\", \"RI\", \"Na\", \"Mg\", \"Al\", \"Si\",\"K\",\"Ca\", \"Ba\",\"Fe\",\"Type_of_glass2\") %&gt;% \n  rename(Type_of_glass = Type_of_glass2)\n\nglassdata2\n\n# A tibble: 214 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass    \n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;            \n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0    building_windows…\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0    building_windows…\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0    building_windows…\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0    building_windows…\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0    building_windows…\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26 building_windows…\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0    building_windows…\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0    building_windows…\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0    building_windows…\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11 building_windows…\n# ℹ 204 more rows\n\n\n\nContinue your chain and keep only observations where the Fe variable is less than 0.2 and the Type of Glass is either “tableware” or “headlamps”.\n\n\nglassdata3&lt;-glassdata %&gt;%\n  mutate(Type_of_glass2 = ifelse(Type_of_glass == 1,\"building_windows_float_processed\",\n                                ifelse(Type_of_glass == 2,\"building_windows_non_float_processed\",\n                                       ifelse(Type_of_glass == 3, \"vehicle_windows_float_processed\",\n                                              ifelse(Type_of_glass == 4, \"vehicle_windows_non_float_processed\",\n                                                     ifelse(Type_of_glass == 5, \"containers\",\n                                                            ifelse(Type_of_glass == 6, \"tableware\",\n                                                                   ifelse(Type_of_glass== 7, \"headlamps\",0)))\n                                              ))))\n    \n  ) %&gt;% \n  select(\"Id\", \"RI\", \"Na\", \"Mg\", \"Al\", \"Si\",\"K\",\"Ca\", \"Ba\",\"Fe\",\"Type_of_glass2\") %&gt;% \n  rename(Type_of_glass = Type_of_glass2) %&gt;% \n  filter(Fe &lt; 0.2 & Type_of_glass == \"tableware\"|\"Type_of_glass\" == \"headlamps\")\n\nglassdata3\n\n# A tibble: 9 × 11\n     Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;        \n1   177  1.52  14    2.39  1.56  72.4     0  9.57     0     0 tableware    \n2   178  1.52  13.8  2.41  1.19  72.8     0  9.77     0     0 tableware    \n3   179  1.52  14.5  2.24  1.62  72.4     0  9.26     0     0 tableware    \n4   180  1.52  14.1  2.19  1.66  72.7     0  9.32     0     0 tableware    \n5   181  1.51  14.4  1.74  1.54  74.6     0  7.59     0     0 tableware    \n6   182  1.52  15.0  0.78  1.74  72.5     0  9.95     0     0 tableware    \n7   183  1.52  14.2  0     2.09  72.7     0 10.9      0     0 tableware    \n8   184  1.52  14.6  0     0.56  73.5     0 11.2      0     0 tableware    \n9   185  1.51  17.4  0     0.34  75.4     0  6.65     0     0 tableware    \n\n\n\n\n\n1. Read this data into R directly from the URL using functions from the tidyverse. Notice that the data doesn’t include column names - add those (in a manner of your choosing). Print out the tibble (just call the object name).\n\nyeastdata&lt;-read_table(\"https://www4.stat.ncsu.edu/online/datasets/yeast.data\", \n                       col_names = c(\"seq_name\",\"mcg\", \"gvh\", \"alm\", \"mit\", \"erl\", \"pox\", \"vac\",\"nuc\",\"class\"))\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  seq_name = col_character(),\n  mcg = col_double(),\n  gvh = col_double(),\n  alm = col_double(),\n  mit = col_double(),\n  erl = col_double(),\n  pox = col_double(),\n  vac = col_double(),\n  nuc = col_double(),\n  class = col_character()\n)\n\nyeastdata\n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\n\n\nStart a chain that removes the seq_name and nuc columns.\n\n\nyeastdata2&lt;-yeastdata %&gt;% \n  select(\"mcg\", \"gvh\", \"alm\", \"mit\", \"erl\", \"pox\", \"vac\",\"class\")\n\nyeastdata2\n\n# A tibble: 1,484 × 8\n     mcg   gvh   alm   mit   erl   pox   vac class\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT  \n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT  \n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT  \n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC  \n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT  \n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT  \n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT  \n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC  \n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT  \n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT  \n# ℹ 1,474 more rows\n\n\n\nContinue your chain to add columns corresponding to the mean and median of each numeric variable (mcg, gvh, alm, mit, erl, pox, and vac) at each class grouping (see the across() function as we did in the dplyr video!).\n\n\nyeastdata3&lt;-yeastdata2 %&gt;% \n  group_by(class) %&gt;%\n  mutate(across(c(1:7), mean, .names = \"mean_{.col}\"))\n\nyeastdata3\n\n# A tibble: 1,484 × 15\n# Groups:   class [10]\n     mcg   gvh   alm   mit   erl   pox   vac class mean_mcg mean_gvh mean_alm\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT      0.521    0.533    0.517\n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT      0.521    0.533    0.517\n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT      0.521    0.533    0.517\n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC      0.452    0.456    0.529\n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT      0.521    0.533    0.517\n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT      0.481    0.470    0.535\n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT      0.521    0.533    0.517\n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC      0.452    0.456    0.529\n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT      0.521    0.533    0.517\n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT      0.481    0.470    0.535\n# ℹ 1,474 more rows\n# ℹ 4 more variables: mean_mit &lt;dbl&gt;, mean_erl &lt;dbl&gt;, mean_pox &lt;dbl&gt;,\n#   mean_vac &lt;dbl&gt;\n\n\n\n\n\n\n\nThere is an excel version of the white wine data set available at https://www4.stat.ncsu.edu/~online/ datasets/white-wine.xlsx. • Download this file • Place it in a folder you know (such as your working directory for your project) • Import the data from the first sheet using the readxl package • Print out the tibble (just call the object name)\n\n\nwhitewine&lt;-read_xlsx(\"white-wine.xlsx\",\n                     sheet = \"white-wine\")\n\nwhitewine\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\n\nWhen you print the data set out to the console, you may notice that some of the variable names are surrounded by backticks. This is because they are non-standard (they include a space in them). We can rename them in a number of ways. We’ll do it by reading in the variable names from the 2nd sheet of the same file. • Read in the data from the 2nd sheet. This should return a data frame with one column containing alternative versions of the variable names. • Grab that column and overwrite the current column names (colnames()) of your white wine tibble.\n\ncolumnnames&lt;-read_xlsx(\"white-wine.xlsx\",\n                       sheet = \"variables\")\n\nwhitewine2&lt;-whitewine %&gt;% \n  rename(\"fixed_acidity\" = 1,\n         \"volatile_acidity\" = 2,\n         \"citric_acid\" = 3,\n         \"residual_sugar\" = 4,\n         \"chlorides\" = 5,\n         \"free_sulfur_dioxide\" = 6,\n         \"total_sulfur_dioxide\" = 7, \n         \"density\" = 8,\n         \"pH\" = 9,\n         \"sulphates\" = 10,\n         \"alcohol\" = 11,\n         \"quality\" = 12)\n\nwhitewine2\n\n# A tibble: 4,898 × 12\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\nLastly, add a column to this data set to indicate the wines are white. That is, add a column that has values of ‘white’ for every observation.\n\nwhitewine3&lt;-whitewine2 %&gt;% \n  mutate(\"color\" = \"white\")\n\nwhitewine3\n\n# A tibble: 4,898 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   color &lt;chr&gt;\n\n\nThere is a semi-colon delimited version of the red wine data set available at https://www4.stat.ncsu. edu/~online/datasets/red-wine.csv. • Read this in using the readr package. Be careful that the columns are read in as the correct type! • You should replace the variable names as done above • You should append a column denoting the type as “red”\n\nredwine&lt;-read_csv2(\"red-wine.csv\")\n\nℹ Using \"','\" as decimal and \"'.'\" as grouping mark. Use `read_delim()` for more control.\n\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 1599 Columns: 12\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr (5): volatile acidity, citric acid, chlorides, density, sulphates\ndbl (2): total sulfur dioxide, quality\nnum (5): fixed acidity, residual sugar, free sulfur dioxide, pH, alcohol\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nredwine2&lt;-redwine %&gt;% \n    rename(\"fixed_acidity\" = 1,\n         \"volatile_acidity\" = 2,\n         \"citric_acid\" = 3,\n         \"residual_sugar\" = 4,\n         \"chlorides\" = 5,\n         \"free_sulfur_dioxide\" = 6,\n         \"total_sulfur_dioxide\" = 7, \n         \"density\" = 8,\n         \"pH\" = 9,\n         \"sulphates\" = 10,\n         \"alcohol\" = 11,\n         \"quality\" = 12)\n\nredwine3&lt;-redwine2 %&gt;% \n  mutate(\"color\" = \"red\")\n\nredwine3\n\n# A tibble: 1,599 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;                &lt;dbl&gt; &lt;chr&gt;    \n 1            74 0.7              0                       19 0.076    \n 2            78 0.88             0                       26 0.098    \n 3            78 0.76             0.04                    23 0.092    \n 4           112 0.28             0.56                    19 0.075    \n 5            74 0.7              0                       19 0.076    \n 6            74 0.66             0                       18 0.075    \n 7            79 0.6              0.06                    16 0.069    \n 8            73 0.65             0                       12 0.065    \n 9            78 0.58             0.02                     2 0.073    \n10            75 0.5              0.36                    61 0.071    \n# ℹ 1,589 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;chr&gt;, pH &lt;dbl&gt;, sulphates &lt;chr&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   color &lt;chr&gt;\n\n\nCombine these two data sets into one data set. They both have the exact same columns so this is an easy append task! • Use the dplyr::bind_rows() function (see the help) to create one tibble containing all of the wine data.\n\nclass(whitewine3$volatile_acidity) &lt;- \"character\"\nclass(whitewine3$citric_acid) &lt;- \"character\"\nclass(whitewine3$chlorides) &lt;- \"character\"\nclass(whitewine3$density) &lt;- \"character\"\nclass(whitewine3$sulphates) &lt;- \"character\"\n\n\ntotalwine&lt;-bind_rows(redwine3, whitewine3) %&gt;% \n  mutate(color = ifelse(color == \"red\", \"red\",\"white\") )\n\ntotalwine\n\n# A tibble: 6,497 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;                &lt;dbl&gt; &lt;chr&gt;    \n 1            74 0.7              0                       19 0.076    \n 2            78 0.88             0                       26 0.098    \n 3            78 0.76             0.04                    23 0.092    \n 4           112 0.28             0.56                    19 0.075    \n 5            74 0.7              0                       19 0.076    \n 6            74 0.66             0                       18 0.075    \n 7            79 0.6              0.06                    16 0.069    \n 8            73 0.65             0                       12 0.065    \n 9            78 0.58             0.02                     2 0.073    \n10            75 0.5              0.36                    61 0.071    \n# ℹ 6,487 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;chr&gt;, pH &lt;dbl&gt;, sulphates &lt;chr&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   color &lt;chr&gt;\n\n\nStart a chain on your new combined data object to filter the data to only look at high-quality wines (quality &gt; 6.5) and wines that have a reasonable alcohol value (alcohol &lt; 132).\n\ntotalwinefiltered&lt;-totalwine %&gt;% \n  filter(quality &gt; 6.5 & alcohol &lt; 132)\n\ntotalwinefiltered\n\n# A tibble: 1,198 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;                &lt;dbl&gt; &lt;chr&gt;    \n 1            73 0.65             0                       12 0.065    \n 2            78 0.58             0.02                     2 0.073    \n 3            85 0.28             0.56                    18 0.092    \n 4            81 0.38             0.28                    21 0.066    \n 5            75 0.52             0.16                    19 0.085    \n 6             8 0.59             0.16                    18 0.065    \n 7            54 0.835            0.08                    12 0.046    \n 8            96 0.32             0.47                    14 0.056    \n 9           128 0.3              0.74                    26 0.095    \n10           128 0.3              0.74                    26 0.095    \n# ℹ 1,188 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;chr&gt;, pH &lt;dbl&gt;, sulphates &lt;chr&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   color &lt;chr&gt;\n\n\nContinue your chain to now sort the data from highest quality to lowest.\n\ntotalwinefiltered&lt;-totalwine %&gt;% \n  filter(quality &gt; 6.5 & alcohol &lt; 132) %&gt;% \n  arrange(-quality)\n\nContinue your chain to select only the variables that contain acid, the alcohol variable, the type variable, and the quality variable.\n\ntotalwinefiltered&lt;-totalwine %&gt;% \n  filter(quality &gt; 6.5 & alcohol &lt; 132) %&gt;% \n  arrange(-quality) %&gt;% \n  select(contains(\"acid\"), alcohol,color, quality)\n\nContinue your chain to add the mean and standard deviation of the alcohol variable to the data set for each setting of the quality variable. You’re done. Way to go! Render your site. Copy the link to y\n\ntotalwinefiltered&lt;-totalwine %&gt;% \n  filter(quality &gt; 6.5 & alcohol &lt; 132) %&gt;% \n  arrange(-quality) %&gt;% \n  select(contains(\"acid\"), alcohol,color, quality) %&gt;%\n  group_by(quality) %&gt;% \n  mutate(across(alcohol, mean, .names = \"mean_{.col}\"),\n         across(alcohol, sd, .names = \"sd_{.col}\"))"
  },
  {
    "objectID": "hw4.html#task-1-conceptual-questions",
    "href": "hw4.html#task-1-conceptual-questions",
    "title": "Homework 4",
    "section": "",
    "text": "library(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(readr)\nlibrary(readxl)\n\n\nIf your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\nc:\\Users\\Documents\\myfolder\\Mydata.csv\n\nWhat are the major benefits of using R projects?\n\nConsolidation of your data and data manipulations into one working directory.\n\nWhat is git and what is github?\n\nGithub is the application to use Git\nGit is the version control system\n\nWhat are the two main differences between a tibble and a data.frame?\n\nA tibble prints in an easy to read format\nTidyverse functions are built for tibbles\n\nRewrite the following nested function call using BaseR’s chaining operator: arrange(filter(select(as_tibble(iris), starts_with(“Petal”), Species), Petal.Length &lt; 1.55), Species)\n\niris2&lt;-iris %&gt;% \n  subset(Petal.Length &lt; 1.55, select = c(grepl(\"^Petal\", names(iris)), Species))"
  },
  {
    "objectID": "hw4.html#task-2-reading-delimited-data",
    "href": "hw4.html#task-2-reading-delimited-data",
    "title": "Homework 4",
    "section": "",
    "text": "1. Read this data into R directly from the URL using functions from the tidyverse. Notice that the data doesn’t include column names - add those (in a manner of your choosing). Print out the tibble (just call the object name).\n\nglassdata&lt;-read_delim(\"https://www4.stat.ncsu.edu/online/datasets/glass.data\", \n                       delim = \",\",\n                       col_names = c(\"Id\", \"RI\", \"Na\", \"Mg\", \"Al\", \"Si\",\"K\",\"Ca\", \"Ba\",\"Fe\",\"Type_of_glass\"))\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): Id, RI, Na, Mg, Al, Si, K, Ca, Ba, Fe, Type_of_glass\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglassdata\n\n# A tibble: 214 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0                1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0                1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0                1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0                1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0                1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26             1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0                1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0                1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0                1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11             1\n# ℹ 204 more rows\n\n\n\nStart a chain that would overwrite the Type_of_glass variable using mutate(). Create a character string version (that is, replace 1 with “building_windows_float_processed”, 2 with “building_win. . .”, etc.) instead (see the variable descriptions above to give meaningful values). (If you are familiar with factors, feel free to use that instead of a character string variable - otherwise, think if/then/else via ifelse().)\n\n\nglassdata2&lt;-glassdata %&gt;%\n  mutate(Type_of_glass2 = ifelse(Type_of_glass == 1,\"building_windows_float_processed\",\n                                ifelse(Type_of_glass == 2,\"building_windows_non_float_processed\",\n                                       ifelse(Type_of_glass == 3, \"vehicle_windows_float_processed\",\n                                              ifelse(Type_of_glass == 4, \"vehicle_windows_non_float_processed\",\n                                                     ifelse(Type_of_glass == 5, \"containers\",\n                                                            ifelse(Type_of_glass == 6, \"tableware\",\n                                                                   ifelse(Type_of_glass== 7, \"headlamps\",0)))\n                                              ))))\n    \n  ) %&gt;% \n  select(\"Id\", \"RI\", \"Na\", \"Mg\", \"Al\", \"Si\",\"K\",\"Ca\", \"Ba\",\"Fe\",\"Type_of_glass2\") %&gt;% \n  rename(Type_of_glass = Type_of_glass2)\n\nglassdata2\n\n# A tibble: 214 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass    \n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;            \n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0    building_windows…\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0    building_windows…\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0    building_windows…\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0    building_windows…\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0    building_windows…\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26 building_windows…\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0    building_windows…\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0    building_windows…\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0    building_windows…\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11 building_windows…\n# ℹ 204 more rows\n\n\n\nContinue your chain and keep only observations where the Fe variable is less than 0.2 and the Type of Glass is either “tableware” or “headlamps”.\n\n\nglassdata3&lt;-glassdata %&gt;%\n  mutate(Type_of_glass2 = ifelse(Type_of_glass == 1,\"building_windows_float_processed\",\n                                ifelse(Type_of_glass == 2,\"building_windows_non_float_processed\",\n                                       ifelse(Type_of_glass == 3, \"vehicle_windows_float_processed\",\n                                              ifelse(Type_of_glass == 4, \"vehicle_windows_non_float_processed\",\n                                                     ifelse(Type_of_glass == 5, \"containers\",\n                                                            ifelse(Type_of_glass == 6, \"tableware\",\n                                                                   ifelse(Type_of_glass== 7, \"headlamps\",0)))\n                                              ))))\n    \n  ) %&gt;% \n  select(\"Id\", \"RI\", \"Na\", \"Mg\", \"Al\", \"Si\",\"K\",\"Ca\", \"Ba\",\"Fe\",\"Type_of_glass2\") %&gt;% \n  rename(Type_of_glass = Type_of_glass2) %&gt;% \n  filter(Fe &lt; 0.2 & Type_of_glass == \"tableware\"|\"Type_of_glass\" == \"headlamps\")\n\nglassdata3\n\n# A tibble: 9 × 11\n     Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;        \n1   177  1.52  14    2.39  1.56  72.4     0  9.57     0     0 tableware    \n2   178  1.52  13.8  2.41  1.19  72.8     0  9.77     0     0 tableware    \n3   179  1.52  14.5  2.24  1.62  72.4     0  9.26     0     0 tableware    \n4   180  1.52  14.1  2.19  1.66  72.7     0  9.32     0     0 tableware    \n5   181  1.51  14.4  1.74  1.54  74.6     0  7.59     0     0 tableware    \n6   182  1.52  15.0  0.78  1.74  72.5     0  9.95     0     0 tableware    \n7   183  1.52  14.2  0     2.09  72.7     0 10.9      0     0 tableware    \n8   184  1.52  14.6  0     0.56  73.5     0 11.2      0     0 tableware    \n9   185  1.51  17.4  0     0.34  75.4     0  6.65     0     0 tableware    \n\n\n\n\n\n1. Read this data into R directly from the URL using functions from the tidyverse. Notice that the data doesn’t include column names - add those (in a manner of your choosing). Print out the tibble (just call the object name).\n\nyeastdata&lt;-read_table(\"https://www4.stat.ncsu.edu/online/datasets/yeast.data\", \n                       col_names = c(\"seq_name\",\"mcg\", \"gvh\", \"alm\", \"mit\", \"erl\", \"pox\", \"vac\",\"nuc\",\"class\"))\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  seq_name = col_character(),\n  mcg = col_double(),\n  gvh = col_double(),\n  alm = col_double(),\n  mit = col_double(),\n  erl = col_double(),\n  pox = col_double(),\n  vac = col_double(),\n  nuc = col_double(),\n  class = col_character()\n)\n\nyeastdata\n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\n\n\nStart a chain that removes the seq_name and nuc columns.\n\n\nyeastdata2&lt;-yeastdata %&gt;% \n  select(\"mcg\", \"gvh\", \"alm\", \"mit\", \"erl\", \"pox\", \"vac\",\"class\")\n\nyeastdata2\n\n# A tibble: 1,484 × 8\n     mcg   gvh   alm   mit   erl   pox   vac class\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT  \n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT  \n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT  \n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC  \n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT  \n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT  \n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT  \n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC  \n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT  \n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT  \n# ℹ 1,474 more rows\n\n\n\nContinue your chain to add columns corresponding to the mean and median of each numeric variable (mcg, gvh, alm, mit, erl, pox, and vac) at each class grouping (see the across() function as we did in the dplyr video!).\n\n\nyeastdata3&lt;-yeastdata2 %&gt;% \n  group_by(class) %&gt;%\n  mutate(across(c(1:7), mean, .names = \"mean_{.col}\"))\n\nyeastdata3\n\n# A tibble: 1,484 × 15\n# Groups:   class [10]\n     mcg   gvh   alm   mit   erl   pox   vac class mean_mcg mean_gvh mean_alm\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT      0.521    0.533    0.517\n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT      0.521    0.533    0.517\n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT      0.521    0.533    0.517\n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC      0.452    0.456    0.529\n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT      0.521    0.533    0.517\n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT      0.481    0.470    0.535\n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT      0.521    0.533    0.517\n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC      0.452    0.456    0.529\n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT      0.521    0.533    0.517\n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT      0.481    0.470    0.535\n# ℹ 1,474 more rows\n# ℹ 4 more variables: mean_mit &lt;dbl&gt;, mean_erl &lt;dbl&gt;, mean_pox &lt;dbl&gt;,\n#   mean_vac &lt;dbl&gt;"
  },
  {
    "objectID": "hw4.html#task-3-combining-excel-and-delimited-data",
    "href": "hw4.html#task-3-combining-excel-and-delimited-data",
    "title": "Homework 4",
    "section": "",
    "text": "There is an excel version of the white wine data set available at https://www4.stat.ncsu.edu/~online/ datasets/white-wine.xlsx. • Download this file • Place it in a folder you know (such as your working directory for your project) • Import the data from the first sheet using the readxl package • Print out the tibble (just call the object name)\n\n\nwhitewine&lt;-read_xlsx(\"white-wine.xlsx\",\n                     sheet = \"white-wine\")\n\nwhitewine\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\n\nWhen you print the data set out to the console, you may notice that some of the variable names are surrounded by backticks. This is because they are non-standard (they include a space in them). We can rename them in a number of ways. We’ll do it by reading in the variable names from the 2nd sheet of the same file. • Read in the data from the 2nd sheet. This should return a data frame with one column containing alternative versions of the variable names. • Grab that column and overwrite the current column names (colnames()) of your white wine tibble.\n\ncolumnnames&lt;-read_xlsx(\"white-wine.xlsx\",\n                       sheet = \"variables\")\n\nwhitewine2&lt;-whitewine %&gt;% \n  rename(\"fixed_acidity\" = 1,\n         \"volatile_acidity\" = 2,\n         \"citric_acid\" = 3,\n         \"residual_sugar\" = 4,\n         \"chlorides\" = 5,\n         \"free_sulfur_dioxide\" = 6,\n         \"total_sulfur_dioxide\" = 7, \n         \"density\" = 8,\n         \"pH\" = 9,\n         \"sulphates\" = 10,\n         \"alcohol\" = 11,\n         \"quality\" = 12)\n\nwhitewine2\n\n# A tibble: 4,898 × 12\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\nLastly, add a column to this data set to indicate the wines are white. That is, add a column that has values of ‘white’ for every observation.\n\nwhitewine3&lt;-whitewine2 %&gt;% \n  mutate(\"color\" = \"white\")\n\nwhitewine3\n\n# A tibble: 4,898 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   color &lt;chr&gt;\n\n\nThere is a semi-colon delimited version of the red wine data set available at https://www4.stat.ncsu. edu/~online/datasets/red-wine.csv. • Read this in using the readr package. Be careful that the columns are read in as the correct type! • You should replace the variable names as done above • You should append a column denoting the type as “red”\n\nredwine&lt;-read_csv2(\"red-wine.csv\")\n\nℹ Using \"','\" as decimal and \"'.'\" as grouping mark. Use `read_delim()` for more control.\n\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 1599 Columns: 12\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr (5): volatile acidity, citric acid, chlorides, density, sulphates\ndbl (2): total sulfur dioxide, quality\nnum (5): fixed acidity, residual sugar, free sulfur dioxide, pH, alcohol\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nredwine2&lt;-redwine %&gt;% \n    rename(\"fixed_acidity\" = 1,\n         \"volatile_acidity\" = 2,\n         \"citric_acid\" = 3,\n         \"residual_sugar\" = 4,\n         \"chlorides\" = 5,\n         \"free_sulfur_dioxide\" = 6,\n         \"total_sulfur_dioxide\" = 7, \n         \"density\" = 8,\n         \"pH\" = 9,\n         \"sulphates\" = 10,\n         \"alcohol\" = 11,\n         \"quality\" = 12)\n\nredwine3&lt;-redwine2 %&gt;% \n  mutate(\"color\" = \"red\")\n\nredwine3\n\n# A tibble: 1,599 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;                &lt;dbl&gt; &lt;chr&gt;    \n 1            74 0.7              0                       19 0.076    \n 2            78 0.88             0                       26 0.098    \n 3            78 0.76             0.04                    23 0.092    \n 4           112 0.28             0.56                    19 0.075    \n 5            74 0.7              0                       19 0.076    \n 6            74 0.66             0                       18 0.075    \n 7            79 0.6              0.06                    16 0.069    \n 8            73 0.65             0                       12 0.065    \n 9            78 0.58             0.02                     2 0.073    \n10            75 0.5              0.36                    61 0.071    \n# ℹ 1,589 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;chr&gt;, pH &lt;dbl&gt;, sulphates &lt;chr&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   color &lt;chr&gt;\n\n\nCombine these two data sets into one data set. They both have the exact same columns so this is an easy append task! • Use the dplyr::bind_rows() function (see the help) to create one tibble containing all of the wine data.\n\nclass(whitewine3$volatile_acidity) &lt;- \"character\"\nclass(whitewine3$citric_acid) &lt;- \"character\"\nclass(whitewine3$chlorides) &lt;- \"character\"\nclass(whitewine3$density) &lt;- \"character\"\nclass(whitewine3$sulphates) &lt;- \"character\"\n\n\ntotalwine&lt;-bind_rows(redwine3, whitewine3) %&gt;% \n  mutate(color = ifelse(color == \"red\", \"red\",\"white\") )\n\ntotalwine\n\n# A tibble: 6,497 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;                &lt;dbl&gt; &lt;chr&gt;    \n 1            74 0.7              0                       19 0.076    \n 2            78 0.88             0                       26 0.098    \n 3            78 0.76             0.04                    23 0.092    \n 4           112 0.28             0.56                    19 0.075    \n 5            74 0.7              0                       19 0.076    \n 6            74 0.66             0                       18 0.075    \n 7            79 0.6              0.06                    16 0.069    \n 8            73 0.65             0                       12 0.065    \n 9            78 0.58             0.02                     2 0.073    \n10            75 0.5              0.36                    61 0.071    \n# ℹ 6,487 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;chr&gt;, pH &lt;dbl&gt;, sulphates &lt;chr&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   color &lt;chr&gt;\n\n\nStart a chain on your new combined data object to filter the data to only look at high-quality wines (quality &gt; 6.5) and wines that have a reasonable alcohol value (alcohol &lt; 132).\n\ntotalwinefiltered&lt;-totalwine %&gt;% \n  filter(quality &gt; 6.5 & alcohol &lt; 132)\n\ntotalwinefiltered\n\n# A tibble: 1,198 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;                &lt;dbl&gt; &lt;chr&gt;    \n 1            73 0.65             0                       12 0.065    \n 2            78 0.58             0.02                     2 0.073    \n 3            85 0.28             0.56                    18 0.092    \n 4            81 0.38             0.28                    21 0.066    \n 5            75 0.52             0.16                    19 0.085    \n 6             8 0.59             0.16                    18 0.065    \n 7            54 0.835            0.08                    12 0.046    \n 8            96 0.32             0.47                    14 0.056    \n 9           128 0.3              0.74                    26 0.095    \n10           128 0.3              0.74                    26 0.095    \n# ℹ 1,188 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;chr&gt;, pH &lt;dbl&gt;, sulphates &lt;chr&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   color &lt;chr&gt;\n\n\nContinue your chain to now sort the data from highest quality to lowest.\n\ntotalwinefiltered&lt;-totalwine %&gt;% \n  filter(quality &gt; 6.5 & alcohol &lt; 132) %&gt;% \n  arrange(-quality)\n\nContinue your chain to select only the variables that contain acid, the alcohol variable, the type variable, and the quality variable.\n\ntotalwinefiltered&lt;-totalwine %&gt;% \n  filter(quality &gt; 6.5 & alcohol &lt; 132) %&gt;% \n  arrange(-quality) %&gt;% \n  select(contains(\"acid\"), alcohol,color, quality)\n\nContinue your chain to add the mean and standard deviation of the alcohol variable to the data set for each setting of the quality variable. You’re done. Way to go! Render your site. Copy the link to y\n\ntotalwinefiltered&lt;-totalwine %&gt;% \n  filter(quality &gt; 6.5 & alcohol &lt; 132) %&gt;% \n  arrange(-quality) %&gt;% \n  select(contains(\"acid\"), alcohol,color, quality) %&gt;%\n  group_by(quality) %&gt;% \n  mutate(across(alcohol, mean, .names = \"mean_{.col}\"),\n         across(alcohol, sd, .names = \"sd_{.col}\"))"
  }
]